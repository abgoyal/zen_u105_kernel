/*
 * Copyright (C) 2012 Spreadtrum Communications Inc.
 *
 * This software is licensed under the terms of the GNU General Public
 * License version 2, as published by the Free Software Foundation, and
 * may be copied, distributed, and modified under those terms.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 */

#ifndef __ASM_ARCH_REGULATOR_DEVICES_H
#define __ASM_ARCH_REGULATOR_DEVICES_H


#include <linux/kernel.h>
#include <linux/regulator/machine.h>

#include <mach/regulator.h>


/*support for customize cfg to special project,
  commonly customer don't need create a overrid cfg.
  if there is a special board ,add new one like this*/
#include <regulator-board.h>

/*cfg macor layer: here is the base to make up for cfg easier*/
#ifndef REGU_NAMES_VDDARM
#define REGU_NAMES_VDDARM
#endif

#ifndef REGU_NAMES_VDD25
#define REGU_NAMES_VDD25
#endif

#ifndef REGU_NAMES_VDD18
#define REGU_NAMES_VDD18
#endif

#ifndef REGU_NAMES_VDD28
#define REGU_NAMES_VDD28
#endif

#ifndef REGU_NAMES_AVDDBB
#define REGU_NAMES_AVDDBB
#endif

#ifndef REGU_NAMES_VDDRF0
#define REGU_NAMES_VDDRF0
#endif

#ifndef REGU_NAMES_VDDRF1
#define REGU_NAMES_VDDRF1
#endif

#ifndef REGU_NAMES_VDDMEM
#define REGU_NAMES_VDDMEM
#endif

#ifndef REGU_NAMES_VDDCORE
#define REGU_NAMES_VDDCORE
#endif

#ifndef REGU_NAMES_LDO_BG
#define REGU_NAMES_LDO_BG
#endif

#ifndef REGU_NAMES_AVDDVB
#define REGU_NAMES_AVDDVB
#endif

#ifndef REGU_NAMES_VDDCAMDA
#define REGU_NAMES_VDDCAMDA
#endif

#ifndef REGU_NAMES_VDDCAMD1
#define REGU_NAMES_VDDCAMD1
#endif

#ifndef REGU_NAMES_VDDCAMD0
#define REGU_NAMES_VDDCAMD0
#endif

#ifndef REGU_NAMES_VDDSIM1
#define REGU_NAMES_VDDSIM1
#endif

#ifndef REGU_NAMES_VDDSIM0
#define REGU_NAMES_VDDSIM0
#endif

#ifndef REGU_NAMES_VDDSD0
#define REGU_NAMES_VDDSD0
#endif

#ifndef REGU_NAMES_VDDUSB
#define REGU_NAMES_VDDUSB
#endif

#ifndef REGU_NAMES_VDDUSBD
#define REGU_NAMES_VDDUSBD
#endif

#ifndef REGU_NAMES_VDDSIM3
#define REGU_NAMES_VDDSIM3
#endif

#ifndef REGU_NAMES_VDDSIM2
#define REGU_NAMES_VDDSIM2
#endif

#ifndef REGU_NAMES_VDDWIF1
#define REGU_NAMES_VDDWIF1
#endif

#ifndef REGU_NAMES_VDDWIF0
#define REGU_NAMES_VDDWIF0
#endif

#ifndef REGU_NAMES_VDDSD1
#define REGU_NAMES_VDDSD1
#endif

#ifndef REGU_NAMES_VDDRTC
#define REGU_NAMES_VDDRTC
#endif

#ifndef REGU_NAMES_DVDD18
#define REGU_NAMES_DVDD18
#endif

#ifndef REGU_NAMES_LDO_PA
#define REGU_NAMES_LDO_PA
#endif


/*internal cfg transfer layer: (customer and user ignore it)
  Macors for standart regulator consumer supply
  in custom cfg don't overrid CONSUMERS_XXX
  just overrid REGU_NAMES_XXX*/

#define CONSUMERS_VDDARM	\
	REGU_NAMES_VDDARM	\
	REGULATOR_SUPPLY("VDDARM",	NULL),

#define CONSUMERS_VDD25	\
	REGU_NAMES_VDD25	\
	REGULATOR_SUPPLY("VDD25",	NULL),

#define CONSUMERS_VDD18	\
	REGU_NAMES_VDD18	\
	REGULATOR_SUPPLY("VDD18",	NULL),

#define CONSUMERS_VDD28	\
	REGU_NAMES_VDD28	\
	REGULATOR_SUPPLY("VDD28",	NULL),

#define CONSUMERS_AVDDBB	\
	REGU_NAMES_AVDDBB	\
	REGULATOR_SUPPLY("AVDDBB",	NULL),

#define CONSUMERS_VDDRF0	\
	REGU_NAMES_VDDRF0	\
	REGULATOR_SUPPLY("VDDRF0",	NULL),

#define CONSUMERS_VDDRF1	\
	REGU_NAMES_VDDRF1	\
	REGULATOR_SUPPLY("VDDRF1",	NULL),

#define CONSUMERS_VDDMEM	\
	REGU_NAMES_VDDMEM	\
	REGULATOR_SUPPLY("VDDMEM",	NULL),

#define CONSUMERS_VDDCORE	\
	REGU_NAMES_VDDCORE	\
	REGULATOR_SUPPLY("VDDCORE",	NULL),

#define CONSUMERS_LDO_BG	\
	REGU_NAMES_LDO_BG	\
	REGULATOR_SUPPLY("LDO_BG",	NULL),

#define CONSUMERS_AVDDVB	\
	REGU_NAMES_AVDDVB	\
	REGULATOR_SUPPLY("AVDDVB",	NULL),

#define CONSUMERS_VDDCAMDA	\
	REGU_NAMES_VDDCAMDA	\
	REGULATOR_SUPPLY("VDDCAMDA",	NULL),

#define CONSUMERS_VDDCAMD1	\
	REGU_NAMES_VDDCAMD1	\
	REGULATOR_SUPPLY("VDDCAMD1",	NULL),

#define CONSUMERS_VDDCAMD0	\
	REGU_NAMES_VDDCAMD0	\
	REGULATOR_SUPPLY("VDDCAMD0",	NULL),

#define CONSUMERS_VDDSIM1	\
	REGU_NAMES_VDDSIM1	\
	REGULATOR_SUPPLY("VDDSIM1",	NULL),

#define CONSUMERS_VDDSIM0	\
	REGU_NAMES_VDDSIM0	\
	REGULATOR_SUPPLY("VDDSIM0",	NULL),

#define CONSUMERS_VDDSD0	\
	REGU_NAMES_VDDSD0	\
	REGULATOR_SUPPLY("VDDSD0",	NULL),

#define CONSUMERS_VDDUSB	\
	REGU_NAMES_VDDUSB	\
	REGULATOR_SUPPLY("VDDUSB",	NULL),

#define CONSUMERS_VDDUSBD	\
	REGU_NAMES_VDDUSBD	\
	REGULATOR_SUPPLY("VDDUSBD",	NULL),

#define CONSUMERS_VDDSIM3	\
	REGU_NAMES_VDDSIM3	\
	REGULATOR_SUPPLY("VDDSIM3",	NULL),

#define CONSUMERS_VDDSIM2	\
	REGU_NAMES_VDDSIM2	\
	REGULATOR_SUPPLY("VDDSIM2",	NULL),

#define CONSUMERS_VDDWIF1	\
	REGU_NAMES_VDDWIF1	\
	REGULATOR_SUPPLY("VDDWIF1",	NULL),

#define CONSUMERS_VDDWIF0	\
	REGU_NAMES_VDDWIF0	\
	REGULATOR_SUPPLY("VDDWIF0",	NULL),

#define CONSUMERS_VDDSD1	\
	REGU_NAMES_VDDSD1	\
	REGULATOR_SUPPLY("VDDSD1",	NULL),

#define CONSUMERS_VDDRTC	\
	REGU_NAMES_VDDRTC	\
	REGULATOR_SUPPLY("VDDRTC",	NULL),

#define CONSUMERS_DVDD18	\
	REGU_NAMES_DVDD18	\
	REGULATOR_SUPPLY("DVDD18",	NULL),

#define CONSUMERS_LDO_PA	\
	REGU_NAMES_LDO_PA	\
	REGULATOR_SUPPLY("LDO_PA",	NULL),


/*Macors for ldo init status cfg*/
#ifndef REGU_INIT_VDDARM
#define REGU_INIT_VDDARM	\
	REGU_INIT_STATUS(LDO_VDDARM,		LDO_INIT_NA,	LDO_INIT_NA,	LDO_INIT_SLP_ON)
#endif

#ifndef REGU_INIT_VDD25
#define REGU_INIT_VDD25		\
	REGU_INIT_STATUS(LDO_VDD25,		LDO_INIT_NA,	LDO_INIT_NA,	LDO_INIT_SLP_ON)
#endif

#ifndef REGU_INIT_VDD18
#define REGU_INIT_VDD18		\
	REGU_INIT_STATUS(LDO_VDD18,		LDO_INIT_NA,	LDO_INIT_NA,	LDO_INIT_SLP_OFF)
#endif

#ifndef REGU_INIT_VDD28
#define REGU_INIT_VDD28		\
	REGU_INIT_STATUS(LDO_VDD28,		LDO_INIT_NA,	LDO_INIT_NA,	LDO_INIT_SLP_OFF)
#endif

#ifndef REGU_INIT_AVDDBB
#define REGU_INIT_AVDDBB	\
	REGU_INIT_STATUS(LDO_AVDDBB,		LDO_INIT_NA,	LDO_INIT_NA,	LDO_INIT_SLP_ON)
#endif

#ifndef REGU_INIT_VDDRF0
#define REGU_INIT_VDDRF0	\
	REGU_INIT_STATUS(LDO_VDDRF0,		LDO_INIT_NA,	LDO_INIT_NA,	LDO_INIT_SLP_ON)
#endif

#ifndef REGU_INIT_VDDRF1
#define REGU_INIT_VDDRF1	\
	REGU_INIT_STATUS(LDO_VDDRF1,		LDO_INIT_NA,	LDO_INIT_NA,	LDO_INIT_SLP_ON)
#endif

#ifndef REGU_INIT_VDDMEM
#define REGU_INIT_VDDMEM	\
	REGU_INIT_STATUS(LDO_VDDMEM,		LDO_INIT_NA,	LDO_INIT_NA,	LDO_INIT_NA	)
#endif

#ifndef REGU_INIT_VDDCORE
#define REGU_INIT_VDDCORE	\
	REGU_INIT_STATUS(LDO_VDDCORE,		LDO_INIT_NA,	LDO_INIT_NA,	LDO_INIT_NA	)
#endif

#ifndef REGU_INIT_LDO_BG
#define REGU_INIT_LDO_BG	\
	REGU_INIT_STATUS(LDO_LDO_BG,		LDO_INIT_NA,	LDO_INIT_NA,	LDO_INIT_NA	)
#endif

#ifndef REGU_INIT_AVDDVB
#define REGU_INIT_AVDDVB	\
	REGU_INIT_STATUS(LDO_AVDDVB,		LDO_INIT_NA,	LDO_INIT_NA,	LDO_INIT_SLP_OFF)
#endif

#ifndef REGU_INIT_VDDCAMDA
#define REGU_INIT_VDDCAMDA	\
	REGU_INIT_STATUS(LDO_VDDCAMDA,		LDO_INIT_NA,	LDO_INIT_NA,	LDO_INIT_SLP_ON)
#endif

#ifndef REGU_INIT_VDDCAMD1
#define REGU_INIT_VDDCAMD1	\
	REGU_INIT_STATUS(LDO_VDDCAMD1,		LDO_INIT_NA,	LDO_INIT_NA,	LDO_INIT_SLP_ON)
#endif

#ifndef REGU_INIT_VDDCAMD0
#define REGU_INIT_VDDCAMD0	\
	REGU_INIT_STATUS(LDO_VDDCAMD0,		LDO_INIT_NA,	LDO_INIT_NA,	LDO_INIT_SLP_ON)
#endif

#ifndef REGU_INIT_VDDSIM1
#define REGU_INIT_VDDSIM1	\
	REGU_INIT_STATUS(LDO_VDDSIM1,		LDO_INIT_NA,	LDO_INIT_NA,	LDO_INIT_SLP_OFF)
#endif

#ifndef REGU_INIT_VDDSIM0
#define REGU_INIT_VDDSIM0	\
	REGU_INIT_STATUS(LDO_VDDSIM0,		LDO_INIT_NA,	LDO_INIT_NA,	LDO_INIT_SLP_OFF)
#endif

#ifndef REGU_INIT_VDDSD0
#define REGU_INIT_VDDSD0	\
	REGU_INIT_STATUS(LDO_VDDSD0,		LDO_INIT_NA,	LDO_INIT_NA,	LDO_INIT_SLP_ON)
#endif

#ifndef REGU_INIT_VDDUSB
#define REGU_INIT_VDDUSB	\
	REGU_INIT_STATUS(LDO_VDDUSB,		LDO_INIT_NA,	LDO_INIT_NA,	LDO_INIT_SLP_ON)
#endif

#ifndef REGU_INIT_VDDUSBD
#define REGU_INIT_VDDUSBD	\
	REGU_INIT_STATUS(LDO_VDDUSBD,		LDO_INIT_NA,	LDO_INIT_NA,	LDO_INIT_NA	)
#endif

#ifndef REGU_INIT_VDDSIM3
#define REGU_INIT_VDDSIM3	\
	REGU_INIT_STATUS(LDO_VDDSIM3,		LDO_INIT_NA,	LDO_INIT_NA,	LDO_INIT_SLP_OFF)
#endif

#ifndef REGU_INIT_VDDSIM2
#define REGU_INIT_VDDSIM2	\
	REGU_INIT_STATUS(LDO_VDDSIM2,		LDO_INIT_NA,	LDO_INIT_NA,	LDO_INIT_SLP_OFF)
#endif

#ifndef REGU_INIT_VDDWIF1
#define REGU_INIT_VDDWIF1	\
	REGU_INIT_STATUS(LDO_VDDWIF1,		LDO_INIT_NA,	LDO_INIT_NA,	LDO_INIT_SLP_OFF)
#endif

#ifndef REGU_INIT_VDDWIF0
#define REGU_INIT_VDDWIF0	\
	REGU_INIT_STATUS(LDO_VDDWIF0,		LDO_INIT_NA,	LDO_INIT_NA,	LDO_INIT_SLP_ON)
#endif

#ifndef REGU_INIT_VDDSD1
#define REGU_INIT_VDDSD1	\
	REGU_INIT_STATUS(LDO_VDDSD1,		LDO_INIT_NA,	LDO_INIT_NA,	LDO_INIT_SLP_OFF)
#endif

#ifndef REGU_INIT_VDDRTC
#define REGU_INIT_VDDRTC	\
	REGU_INIT_STATUS(LDO_VDDRTC,		LDO_INIT_NA,	LDO_INIT_NA,	LDO_INIT_NA	)
#endif

#ifndef REGU_INIT_DVDD18
#define REGU_INIT_DVDD18	\
	REGU_INIT_STATUS(LDO_DVDD18,		LDO_INIT_NA,	LDO_INIT_NA,	LDO_INIT_NA	)
#endif

#ifndef REGU_INIT_LDO_PA
#define REGU_INIT_LDO_PA	\
	REGU_INIT_STATUS(LDO_LDO_PA,		LDO_INIT_NA,	LDO_INIT_NA,	LDO_INIT_NA	)
#endif


/*export special init func from regulator driver to regulator machine*/
extern int sc8810_regulator_init_reg(void * driver_data);

#endif

